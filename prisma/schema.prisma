generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model albums {
  id           Int      @id @default(autoincrement())
  album_title  String   @db.VarChar(255)
  desc         String?  @db.VarChar(2000)
  artist_id    Int
  release_date DateTime @db.Date
  cover        String   @db.Text
  create_time  DateTime @db.DateTime(0)
  update_time  DateTime @db.DateTime(0)
  artists      artists  @relation(fields: [artist_id], references: [id], onUpdate: Restrict, map: "albums_ibfk_1")
  songs        songs[]

  @@index([artist_id], map: "artist_id")
}

model artists {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  biography    String?        @db.Text
  image_url    String         @db.VarChar(255)
  create_time  DateTime       @db.DateTime(0)
  update_time  DateTime       @db.DateTime(0)
  albums       albums[]
  song_artists song_artists[]
}

model playlist {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  author           String             @db.VarChar(255)
  create_time      DateTime           @db.DateTime(0)
  desc             String?            @db.VarChar(255)
  tags             Json?
  isPrivate        String?            @db.VarChar(255)
  img              String?            @db.VarChar(255)
  user_id          Int
  update_time      DateTime           @db.DateTime(0)
  users            users              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk")
  playlist_collect playlist_collect[]
  playlist_songs   playlist_songs[]

  @@index([author], map: "name")
  @@index([user_id], map: "fk")
}

model playlist_collect {
  user_id      Int
  playlist_id  Int
  collected_at DateTime? @default(now()) @db.DateTime(0)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_collect_ibfk_1")
  playlist     playlist  @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_collect_ibfk_2")

  @@id([user_id, playlist_id])
  @@index([playlist_id], map: "idx_user_collections_playlist_id")
  @@index([user_id], map: "idx_user_collections_user_id")
}

model playlist_songs {
  playlist_id Int
  song_id     Int
  playlist    playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_songs_ibfk_1")
  songs       songs    @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_songs_ibfk_2")

  @@id([playlist_id, song_id])
  @@index([playlist_id], map: "idx_playlist_songs_playlist_id")
  @@index([song_id], map: "idx_playlist_songs_song_id")
}

model song_artists {
  song_id   Int
  artist_id Int
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_song_artists_artist")
  songs     songs   @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_song_artists_song")

  @@id([song_id, artist_id])
  @@index([artist_id], map: "fk_song_artists_artist")
}

model songs {
  id                Int                 @id @default(autoincrement())
  song_title        String              @db.VarChar(255)
  duration          Int
  file_path         String              @db.Text
  albums_id         Int
  lyric             String?             @db.VarChar(255)
  tags              Json?
  create_time       DateTime            @db.DateTime(0)
  update_time       DateTime            @db.DateTime(0)
  play_count        Int?
  play_record       play_record[]
  playlist_songs    playlist_songs[]
  song_artists      song_artists[]
  song_monthly_stat song_monthly_stat[]
  albums            albums              @relation(fields: [albums_id], references: [id], onUpdate: Restrict, map: "songs_ibfk_1")
  user_likes_songs  user_likes_songs[]

  @@index([albums_id], map: "albums_id")
}

model user_likes_songs {
  user_id  Int
  song_id  Int
  liked_at DateTime @default(now()) @db.DateTime(0)
  users    users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_likes_songs_ibfk_1")
  songs    songs    @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_likes_songs_ibfk_2")

  @@id([user_id, song_id])
  @@index([song_id], map: "idx_user_likes_songs_song_id")
  @@index([user_id], map: "idx_user_likes_songs_user_id")
}

model users {
  id               Int                @id @default(autoincrement())
  username         String             @unique(map: "unique_username") @db.VarChar(255)
  password         String             @db.VarChar(255)
  create_time      DateTime           @db.DateTime(0)
  cover            String?            @db.VarChar(255)
  update_time      DateTime           @db.Date
  play_record      play_record[]
  playlist         playlist[]
  playlist_collect playlist_collect[]
  user_likes_songs user_likes_songs[]
}

model play_record {
  id        Int      @id @default(autoincrement())
  song_id   Int
  user_id   Int?
  played_at DateTime @default(now()) @db.DateTime(0)
  songs     songs    @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_play_record_song")
  users     users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_play_record_user")

  @@index([user_id], map: "fk_play_record_user")
  @@index([played_at], map: "idx_played_at")
  @@index([song_id, played_at], map: "idx_song_played")
}

model song_monthly_stat {
  id         Int   @id @default(autoincrement())
  song_id    Int
  year       Int
  month      Int
  play_count Int   @default(0)
  songs      songs @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_monthly_stat_song")

  @@unique([song_id, year, month], map: "uq_song_year_month")
  @@index([song_id], map: "idx_song_id")
  @@index([year, month], map: "idx_year_month")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
